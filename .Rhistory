earldeath_ind <- sample(size,earldeath[i])
earldeath_samp <- box[earldeath_ind]
T_02[i] <- sum(earldeath_samp)
cens_ind <- sample(size,censored[i])
cens_samp <- box[cens_ind]
cens[i] <- sum(cens_samp)
}
start <- 10
#state 3 = censored
entry_state <-  (cens > start) * {0*(start < pmin(T_01,T_02)) + 1*((T_01 < pmin(T_02,start)) & (start < T_12)) + 2*((T_02 < start) | (T_12 < start))} +
3*(cens < start)
first_transition <- pmin(cens,T_01,T_02)
all_data <- matrix(rep(0,5*4*n),nrow = 4*n)
count <- 1
for (i in id){
if (entry_state[i] == 0){
if (T_01[i] < cens[i]){
all_data[count,] <- c(i,0,1,0,T_01[i])
count <- count + 1
if(T_12[i] < cens[i]){
all_data[count,] <- c(i,1,2,T_01[i],T_12[i])
}
else{
all_data[count,] <- c(i,1,3,T_01[i],cens[i])
}
}
else{
all_data[count,] <- c(i,0,3,0,cens[i])
}
}
else if(entry_state[i] == 1){
if(T_12[i] < cens[i]){
all_data[count,] <- c(i,1,2,0,T_12[i])
}
else{
all_data[count + 1,] <- c(i,1,3,0,cens[i])
}
}
count <- count + 1
}
data <- data.frame(all_data[-which(all_data[,1] == 0),])
names(data) <- c("id","from","to","entry","exit")
tra <- matrix(c(F,T,T,F,F,T,F,F,F),3,3,byrow=T)
# from illness to death
i <- 1
j <- 2
# time stamp
s <- 50
t <- 250
# estimate transition probabilities
etmAJE_nonmarkov <- etm(data, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
PijAJE_nonmarkov <- c(0,etmAJE_nonmarkov$est[i + 1,j + 1,])
timesAJE_nonmarkov <- c(s,etmAJE_nonmarkov$time)
good_ind_nonmarkov <- which(data$entry <= s & data$exit >s & data$from == i)
rel_ids_nonmarkov <- unique(data$id[good_ind_nonmarkov])
npeople_nonmarkov <- length(rel_ids_nonmarkov)
View(data)
View(data)
rm(list = ls())
library(etm)
library(mstate)
# simulation
n <- 500
id <- 1:n
size <- 500
box <- rexp(size,1/2)
sick <- rpois(n,40) #number of coins to draw until sick
death <- rpois(n,50)  #number of coins to draw until dead
earldeath <- rpois(n,50)  #number of coins to draw until early death (transfer from healthy to dead state)
censored <- rpois(n,100) #number of coins to draw until censored
T_01 <- rep(0,n)
T_02 <- rep(0,n)
T_12 <- rep(0,n)
cens <- rep(0,n)
# 'draw' coins from the box without replacement and note the sum to get the time of transfer between states
# results in a time-continuous non-markov multi state process
# again, the first transition that happens to an individual is considered to be the one that actually happens
for (i in 1:n){
sick_ind <- sample(size,sick[i])
sick_samp <- box[sick_ind]
T_01[i] <- sum(sick_samp)
remain <- box[-sick_samp]
death_ind <- sample(size - sick[i],death[i])
death_samp <- remain[death_ind]
T_12[i] <- T_01[i] + sum(death_samp)
earldeath_ind <- sample(size,earldeath[i])
earldeath_samp <- box[earldeath_ind]
T_02[i] <- sum(earldeath_samp)
cens_ind <- sample(size,censored[i])
cens_samp <- box[cens_ind]
cens[i] <- sum(cens_samp)
}
start <- 10
#state 3 = censored
entry_state <-  (cens > start) * {0*(start < pmin(T_01,T_02)) + 1*((T_01 < pmin(T_02,start)) & (start < T_12)) + 2*((T_02 < start) | (T_12 < start))} +
3*(cens < start)
first_transition <- pmin(cens,T_01,T_02)
all_data <- matrix(rep(0,5*4*n),nrow = 4*n)
count <- 1
for (i in id){
if (entry_state[i] == 0){
if (T_01[i] < cens[i]){
all_data[count,] <- c(i,0,1,0,T_01[i])
count <- count + 1
if(T_12[i] < cens[i]){
all_data[count,] <- c(i,1,2,T_01[i],T_12[i])
}
else{
all_data[count,] <- c(i,1,3,T_01[i],cens[i])
}
}
else{
all_data[count,] <- c(i,0,3,0,cens[i])
}
}
else if(entry_state[i] == 1){
if(T_12[i] < cens[i]){
all_data[count,] <- c(i,1,2,0,T_12[i])
}
else{
all_data[count + 1,] <- c(i,1,3,0,cens[i])
}
}
count <- count + 1
}
data <- data.frame(all_data[-which(all_data[,1] == 0),])
names(data) <- c("id","from","to","entry","exit")
tra <- matrix(c(F,T,T,F,F,T,F,F,F),3,3,byrow=T)
# from illness to death
i <- 1
j <- 2
# time stamp
s <- 70
t <- 250
# estimate transition probabilities
etmAJE_nonmarkov <- etm(data, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
PijAJE_nonmarkov <- c(0,etmAJE_nonmarkov$est[i + 1,j + 1,])
timesAJE_nonmarkov <- c(s,etmAJE_nonmarkov$time)
good_ind_nonmarkov <- which(data$entry <= s & data$exit >s & data$from == i)
rel_ids_nonmarkov <- unique(data$id[good_ind_nonmarkov])
npeople_nonmarkov <- length(rel_ids_nonmarkov)
# "good" data
data_s <- data[data$id %in% rel_ids_nonmarkov,]
# Remove all intervals ending before s
data_s <- data_s[data_s$exit >= s,]
# Truncate all intervals starting before s
data_s$entry[data_s$entry < s] <- s
etm_s_nonmarkov <- etm(data_s, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
F0_nonmarkov <- c(0,etm_s_nonmarkov$est[i + 1,j + 1,])
timesTE_nonmarkov <- c(s,etm_s_nonmarkov$time)
h <- 0.5
x_nonmarkov <- seq(s,t,h)
TE_nonmarkov <- approxfun(timesTE_nonmarkov, F0_nonmarkov, method="constant")
plot(x_nonmarkov, ifelse(is.na(TE_nonmarkov(x_nonmarkov)), max(TE_nonmarkov(x_nonmarkov), na.rm=T), TE_nonmarkov(x_nonmarkov)), type="l", ylim=c(0,1), xlab="time (days)", ylab="prob critical to dead")
AJE_nonmarkov <- approxfun(timesAJE_nonmarkov, PijAJE_nonmarkov, method="constant")
lines(x_nonmarkov, ifelse(is.na(AJE_nonmarkov(x_nonmarkov)), max(AJE_nonmarkov(x_nonmarkov), na.rm=T), AJE_nonmarkov(x_nonmarkov)), type="l", col=2)
legend("bottomright", legend=c("Titman estimator", "Aalen-Johansen estimator"), col=1:2, lty=1)
# the plot shows that Titman estimator and Aalen-Johansen estimator converge to different distributions for the transition probability
TE_pred_nonmarkov <- ifelse(is.na(TE_nonmarkov(x_nonmarkov)), max(TE_nonmarkov(x_nonmarkov), na.rm=T), TE_nonmarkov(x_nonmarkov))
AJE_pred_nonmarkov <- ifelse(is.na(AJE_nonmarkov(x_nonmarkov)), max(AJE_nonmarkov(x_nonmarkov), na.rm=T), AJE_nonmarkov(x_nonmarkov))
teststat_pred_nonmarkov <- n*sum((AJE_pred_nonmarkov-TE_pred_nonmarkov)^2 * h)
bs_one_iter <- function(n, data, max_id, AJE, TE, times=x, h, tra){
multinom <- sample(1:n, replace=T)
data_bs <- subset(data, id==data$id[multinom[1]])
for(k in 2:n){
data_temp <- subset(data, id==data$id[multinom[k]])
data_temp$id <- data_temp$id + max_id * k
data_bs <- rbind(data_bs, data_temp)
}
etmAJE <- etm(data_bs, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
PijAJE <- c(0,etmAJE$est[i + 1,j + 1,])
timesAJE <- c(s,etmAJE$time)
good_ind <- which(data$entry <= s & data$exit >s & data$from==i)
rel_ids <- unique(data$id[good_ind])
npeople <- length(rel_ids)
data_s <- data[data$id %in% rel_ids,]
#Remove all intervals ending before s
data_s <- data_s[data_s$exit >= s,]
#Truncate all intervals starting before s
data_s$entry[data_s$entry <s]<-s
etm_s <- etm(data_s, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
F0 <- c(0,etm_s$est[i + 1,j + 1,])
timesTE <- c(s,etm_s$time)
TE_bs <- approxfun(timesTE, F0, method="constant")
AJE_bs <- approxfun(timesAJE, PijAJE, method="constant")
TE_bs <- ifelse(is.na(TE_bs(times)), max(TE_bs(times), na.rm=T), TE_bs(times))
AJE_bs <- ifelse(is.na(AJE_bs(times)), max(AJE_bs(times), na.rm=T), AJE_bs(times))
return(n*sum((AJE_bs-AJE-TE_bs+TE)^2 * h))
}
max_id_nonmarkov <- max(data$id)
BSiter <- 1000
set.seed(1234)
BSstat_pred <- replicate(BSiter, bs_one_iter(n, data, max_id_nonmarkov, AJE_pred_nonmarkov, TE_pred_nonmarkov, times=x_nonmarkov, h, tra))
sum(BSstat_pred >= teststat_pred_nonmarkov)/BSiter
sum(BSstat_pred >= teststat_pred_nonmarkov)/BSiter
BSstat_pred
source('~/R/code/markov.R')
sum(BSstat_pred >= teststat_pred_markov)/BSiter
source('~/R/code/markov.R')
sum(BSstat_pred >= teststat_pred_markov)/BSiter
BSstat_pred
max_id_markov <- max(transitions$id)
BSiter <- 1000
set.seed(1234)
BSstat_pred <- replicate(BSiter, bs_one_iter(n, transitions, max_id_markov, AJE_pred_markov, TE_pred_markov, times=x_markov, h, tra))
sum(BSstat_pred >= teststat_pred_markov)/BSiter
sum(BSstat_pred >= teststat_pred_markov)/BSiter
source('~/R/code/non-markov.R')
sum(BSstat_pred >= teststat_pred_nonmarkov)/BSiter
BSstat_pred
source('~/R/code/markov.R')
sum(BSstat_pred >= teststat_pred_markov)/BSiter
source('~/R/code/markov.R')
sum(BSstat_pred >= teststat_pred_markov)/BSiter
BSstat_pred
sum(BSstat_pred >= teststat_pred_markov)/BSiter
max_id_markov <- max(transitions$id)
BSiter <- 1000
#set.seed(1234)
BSstat_pred <- replicate(BSiter, bs_one_iter(n, transitions, max_id_markov, AJE_pred_markov, TE_pred_markov, times=x_markov, h, tra))
sum(BSstat_pred >= teststat_pred_markov)/BSiter
sum(BSstat_pred >= teststat_pred_markov)/BSiter
source('~/R/code/markov_new.R', echo=TRUE)
load("C:/Users/alexander.lammerich/Documents/.RData")
conf_level
source('~/R/code/non-markov_new.R', echo=TRUE)
source('~/R/code/non-markov_new.R', echo=TRUE)
conmf_level
conf_level
source('~/R/code/non-markov_new.R', echo=TRUE)
source('~/R/code/non-markov_new.R', echo=TRUE)
source('~/R/code/non-markov_new.R', echo=TRUE)
warnings()
? etm
View(datas_s)
BSiter <- 1
BSstat_pred <- replicate(BSiter, bs_one_iter(n, datas, max_id_markov, times=x_markov, h, tra))
library(etm)
library(mstate)
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
n <- 100
s <- paste("markov1000n%n",n)
s
s <- paste("markov1000n",n)
s
s <- paste("markov1000n",n,".RData")
s
s <- paste("markov1000n",n,".RData",sep = "")
s
s <- paste("markov1000n",n,".RData",sep = "")
save.image(s)
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
warnings()
mean(test_accepted)
mean(conf_level)
conf_level
test_accepted
source('~/R/code/markov_new.R')
rm(list = ls())
library(etm)
library(mstate)
#markovian case
alpha <- 0.05
BSiter <- 500
rate_0 <- 1/15
rate_1 <- 1/30
p <- 0.7
q <- 0.8
conf_level <- rep(0,1000)
test_accepted <- rep(0,1000)
tra <- matrix(c(FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE),3,3,byrow=TRUE)
# from illness to death
i <- 1
j <- 2
# time stamp
s <- 20
t <- 190
n <- c(100,300,500,700,1000)
bs_one_iter <- function(n, data, max_id, AJE, TE, times=x, h, tra){
multinom <- sample(1:n, replace=T)
data_bs <- subset(data, id==data$id[multinom[1]])
for(k in 2:n){
data_temp <- subset(data, id==data$id[multinom[k]])
data_temp$id <- data_temp$id + max_id * k
data_bs <- rbind(data_bs, data_temp)
}
etmAJE <- etm(data_bs, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
PijAJE <- c(0,etmAJE$est[i + 1,j + 1,])
timesAJE <- c(s,etmAJE$time)
good_ind <- which(data$entry <= s & data$exit >s & data$from==i)
rel_ids <- unique(data$id[good_ind])
npeople <- length(rel_ids)
data_s <- data[data$id %in% rel_ids,]
#Remove all intervals ending before s
data_s <- data_s[data_s$exit >= s,]
#Truncate all intervals starting before s
data_s$entry[data_s$entry <s]<-s
etm_s <- etm(data_s, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
F0 <- c(0,etm_s$est[i + 1,j + 1,])
timesTE <- c(s,etm_s$time)
TE_bs <- approxfun(timesTE, F0, method="constant")
AJE_bs <- approxfun(timesAJE, PijAJE, method="constant")
TE_bs <- ifelse(is.na(TE_bs(times)), max(TE_bs(times), na.rm=TRUE), TE_bs(times))
AJE_bs <- ifelse(is.na(AJE_bs(times)), max(AJE_bs(times), na.rm=TRUE), AJE_bs(times))
return(n*sum((AJE_bs-AJE-TE_bs+TE)^2 * h))
}
n <- 100
start_state <- rep(0,n)
T_0 <- rexp(n,rate_0) # time in state 0
cens <- rexp(n,rate_0 + rate_1)
r <- runif(n,0,1)
state_1 <- (1*(r < p) + 2*(p <= r))*(cens > T_0) + 3*(cens <= T_0)
T_1 <- rexp(n,rate_1) # time in state 1
state_2 <- 2*(cens > T_0+T_1) + 3*(T_0 <= cens & cens <= T_0+T_1)
# results in time-continuous markovian multi-state process'
# state 3 = censored
# next we transform the generated data into a data matrix that shows transition times and states per patient
all_datas <- matrix(rep(0,5*2*n),nrow = 2*n)
count <- 1
for (m in 1:n){
if(state_1[m] == 3 | state_1[m] == 2){
all_datas[count,] <- c(m,0,state_1[m],0,T_0[m])
}
else{
all_datas[count,] <- c(m,0,1,0,T_0[m])
count <- count + 1
all_datas[count,] <- c(m,1,state_2[m],T_0[m],T_0[m] + T_1[m])
}
count <- count + 1
}
datas <- data.frame(all_datas[-which(all_datas[,1] == 0),])
names(datas) <- c("id","from","to","entry","exit")
View(datas)
cens
T_0
source('~/R/code/markov_new.R')
View(datas)
cens
T_0+T_1
source('~/R/code/markov_new.R')
View(datas)
source('~/R/code/markov_new.R')
View(datas)
source('~/R/code/markov_new.R')
View(datas)
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
View(datas)
View(datas_s)
state_2
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
n <- 500
for (k in 1:10){
# simulation
start_state <- rep(0,n)
T_0 <- rexp(n,rate_0) # time in state 0
T_1 <- rexp(n,rate_1) # time in state 1
cens <- rexp(n,rate_cens)
r <- runif(n,0,1)
state_1 <- (1*(r < p) + 2*(p <= r))*(cens > T_0) + 3*(cens <= T_0)
state_2 <- 2*(cens > T_0+T_1) + 3*(T_0 <= cens & cens <= T_0+T_1)
# results in time-continuous markovian multi-state process'
# state 3 = censored
# next we transform the generated data into a data matrix that shows transition times and states per patient
all_datas <- matrix(rep(0,5*2*n),nrow = 2*n)
count <- 1
for (m in 1:n){
if(state_1[m] == 3 | state_1[m] == 2){
all_datas[count,] <- c(m,0,state_1[m],0,T_0[m])
}
else{
all_datas[count,] <- c(m,0,1,0,T_0[m])
count <- count + 1
all_datas[count,] <- c(m,1,state_2[m],T_0[m],T_0[m] + T_1[m])
}
count <- count + 1
}
datas <- data.frame(all_datas[-which(all_datas[,1] == 0),])
names(datas) <- c("id","from","to","entry","exit")
# estimate transition probabilities
etmAJE_markov <- etm(datas, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
PijAJE_markov <- c(0,etmAJE_markov$est[i + 1,j + 1,])
timesAJE_markov <- c(s,etmAJE_markov$time)
good_ind_markov <- which(datas$entry <= s & datas$exit >s & datas$from == i)
rel_ids_markov <- unique(datas$id[good_ind_markov])
npeople_markov <- length(rel_ids_markov)
# "good" data
datas_s <- datas[datas$id %in% rel_ids_markov,]
# Remove all intervals ending before s
datas_s <- datas_s[datas_s$exit >= s,]
#Truncate all intervals starting before s
datas_s$entry[datas_s$entry < s] <- s
etm_s_markov <- etm(datas_s, state.names = 0:2, tra=tra, cens.name=3, s=s, t=t, covariance=FALSE, delta.na=FALSE)
F0_markov <- c(0,etm_s_markov$est[i + 1,j + 1,])
timesTE_markov <- c(s,etm_s_markov$time)
h <- 0.5
x_markov <- seq(s,t,h)
TE_markov <- approxfun(timesTE_markov, F0_markov, method="constant")
plot(x_markov, ifelse(is.na(TE_markov(x_markov)), max(TE_markov(x_markov), na.rm=TRUE), TE_markov(x_markov)), type="l", ylim=c(0,1), xlab="time (days)", ylab="prob critical to dead")
AJE_markov <- approxfun(timesAJE_markov, PijAJE_markov, method="constant")
lines(x_markov, ifelse(is.na(AJE_markov(x_markov)), max(AJE_markov(x_markov), na.rm=TRUE), AJE_markov(x_markov)), type="l", col=2)
legend("bottomright", legend=c("Titman estimator", "Aalen-Johansen estimator"), col=1:2, lty=1)
TE_pred_markov <- ifelse(is.na(TE_markov(x_markov)), max(TE_markov(x_markov), na.rm=TRUE), TE_markov(x_markov))
AJE_pred_markov <- ifelse(is.na(AJE_markov(x_markov)), max(AJE_markov(x_markov), na.rm=TRUE), AJE_markov(x_markov))
teststat_pred_markov <- n*sum((AJE_pred_markov-TE_pred_markov)^2 * h)
max_id_markov <- max(datas$id)
# set.seed(1234)
BSstat_pred <- replicate(BSiter, bs_one_iter(n, datas, max_id_markov, AJE_pred_markov, TE_pred_markov, times=x_markov, h, tra))
conf_level[k] <- sum(BSstat_pred >= teststat_pred_markov)/BSiter
# [1] 0.967
BSstat_pred_sort <- sort(BSstat_pred)
Cn <- BSstat_pred_sort[BSiter*(1-alpha)]
test_accepted[k] <- (teststat_pred_markov <= Cn) #accept H0 with conf level alpha?
}
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
View(datas)
source('~/R/code/markov_new.R')
View(datas)
View(all_datas)
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
test_accepted
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
source('~/R/code/markov_new.R')
k
test_rejected
source('~/R/code/markov_new.R')
test_rejected
n
k
k/2
q()
load("C:/Users/alexander.lammerich/Documents/current_env.RData")
test_rejected
conf_level
conf_level[1:(k-1)]
mean(test_rejected[1:(k-1)])
conf_level[1:(k-1)]
max(conf_level[1:(k-1)])
mean(test_rejected[1:(k-1)])
load("C:/Users/alexander.lammerich/Documents/current_env.RData")
mean(test_rejected[1:(k-1)])
load("C:/Users/alexander.lammerich/Documents/current_env.RData")
source('~/R/code/continuous.R')
setwd("~/R/code")
source('~/R/code/continuous.R')
for (n in c(50,100,300,500,1000,2000)){
for (k in 1:number_iteration){
# simulation
start_state <- rep(0,n)
T_01 <- rexp(n,rate_0) # time health to ill state
T_02 <- rexp(n,rate_1) # time health to death state
T_12 <- rexp(n,rate_2) # time from ill to death state
cens <- rexp(n,rate_cens) # time to censoring
state_1 <- 1*(T_01 < pmin(T_02,cens)) + 2*(T_02 < pmin(T_01,cens)) + 3*(cens <= pmin(T_01,T_02))
state_2 <- 2*(cens > T_01+T_12) + 3*(T_01 <= cens & cens <= T_01+T_12)
# results in time-continuous markovian multi-state process'
# state 3 = censored
# next we transform the generated data into a data matrix that shows transition times and states per patient
all_data <- matrix(rep(0,5*2*n),nrow = 2*n)
count <- 1
for (m in 1:n){
if(state_1[m] == 2){
all_data[count,] <- c(m,0,state_1[m],0,T_02[m])
}
else if(state_1[m] == 3){
all_data[count,] <- c(m,0,state_1[m],0,cens[m])
}
else if(state_1[m] == 1 & state_2[m] == 2){
all_data[count,] <- c(m,0,1,0,T_01[m])
count <- count + 1
all_data[count,] <- c(m,1,2,T_01[m],T_01[m] + T_12[m])
}
else if(state_1[m] == 1 & state_2[m] == 3){
all_data[count,] <- c(m,0,1,0,T_01[m])
count <- count + 1
all_data[count,] <- c(m,1,3,T_01[m],cens[m])
}
count <- count + 1
}
if (all_data[2*n,1] == 0){data <- data.frame(all_data[-which(all_data[,1] == 0),])} else {data == all_data}
names(data) <- c("id","from","to","entry","exit")
conf_level[k] <- estimation(data,s,t,i,j,BSiter,tra)
test_rejected[k] <- (conf_level[k] <= alpha)
# BSstat_pred_sort <- sort(BSstat_pred)
# Cn <- BSstat_pred_sort[BSiter*(1-alpha)]
# test_accepted[k] <- (teststat_pred_markov <= Cn) #accept H0 with conf level alpha?
}
string <- paste("markovcont",number_iteration,"n",n,".RData",sep = "")
save.image(string)
}
mean(test_rejected[1:(k-1)])
